install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
devtools::use_data_raw()
library(Erosion)
VorTeq([8,180,180,180,180,180,180,180,180,0,0,0,0,205,205,205,205,205,205,205,205,0,0,0,0])
VorTeq(8,180,180,180,180,180,180,180,180,0,0,0,0,205,205,205,205,205,205,205,205,0,0,0,0)
VorTeq({8,180,180,180,180,180,180,180,180,0,0,0,0,205,205,205,205,205,205,205,205,0,0,0,0})
fl = c(8,180,180,180,180,180,180,180,180,0,0,0,0,205,205,205,205,205,205,205,205,0,0,0,0)
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
VorTeq(fl)
fl
library(Erosion)
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
VorTeq(fl)
library(magrittr)
VirTeq(fl)
VorTeq(fl)
fl
library(Erosion)
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
install.packages(fracdiff)
library(fracdiff)
VorTeq(fl)
?fracdiff
fl
VorTeq(fl)
getwd()
.libpaths()
.libPaths()
install.packages("fracdiff")
library(fracdiff)
fl
VorTeq(fl)
install.packages("uroot")
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
VorTeq(fl)
x
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
getwd()
library(Erosion)
fl
VorTeq(fl)
library(Erosion)
fl
VorTeq(fl)
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('./data/FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
#Build a Regession Tree Model for Erosion Potential using Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,PX7ProcFlow,
PX8ProcFlow,PX9ProcFlow,PX10ProcFlow,PX11ProcFlow,
PX12ProcFlow,PX1MotFlow,PX2MotFlow,PX3MotFlow,
PX4MotFlow,PX5MotFlow,PX6MotFlow,PX7MotFlow,
PX8MotFlow,PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
ErPot_Tree <- train(predictors, output, method = "ctree2", metric="RMSE")
devtools::use_data(ErPot_Tree)
getwd()
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
#Build a Regession Tree Model for Erosion Potential using Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,PX7ProcFlow,
PX8ProcFlow,PX9ProcFlow,PX10ProcFlow,PX11ProcFlow,
PX12ProcFlow,PX1MotFlow,PX2MotFlow,PX3MotFlow,
PX4MotFlow,PX5MotFlow,PX6MotFlow,PX7MotFlow,
PX8MotFlow,PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
ErPot_Tree <- train(predictors, output, method = "ctree2", metric="RMSE")
devtools::use_data(ErPot_Tree)
getwd()
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('./data-raw/FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
#Build a Regession Tree Model for Erosion Potential using Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,PX7ProcFlow,
PX8ProcFlow,PX9ProcFlow,PX10ProcFlow,PX11ProcFlow,
PX12ProcFlow,PX1MotFlow,PX2MotFlow,PX3MotFlow,
PX4MotFlow,PX5MotFlow,PX6MotFlow,PX7MotFlow,
PX8MotFlow,PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
ErPot_Tree <- train(predictors, output, method = "ctree2", metric="RMSE")
devtools::use_data(ErPot_Tree)
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('./data-raw/FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
## Build basic linear model for Erosion Potential Response over Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,PX7ProcFlow,
PX8ProcFlow,PX9ProcFlow,PX10ProcFlow,PX11ProcFlow,
PX12ProcFlow,PX1MotFlow,PX2MotFlow,PX3MotFlow,
PX4MotFlow,PX5MotFlow,PX6MotFlow,PX7MotFlow,
PX8MotFlow,PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
ErPot_Linear <- train(predictors, output, method = "lm", metric="RMSE")
devtools::use_data(ErPot_Linear)
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('./data-raw/FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
## Build basic linear model for Erosion Potential Response over Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,PX7ProcFlow,
PX8ProcFlow,PX9ProcFlow,PX10ProcFlow,PX11ProcFlow,
PX12ProcFlow,PX1MotFlow,PX2MotFlow,PX3MotFlow,
PX4MotFlow,PX5MotFlow,PX6MotFlow,PX7MotFlow,
PX8MotFlow,PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
ErPot_Linear <- train(predictors, output, method = "lm", metric="RMSE")
devtools::use_data(ErPot_Linear, overwrite = TRUE)
library(dplyr)
library(caret)
library(openxlsx)
library(devtools)
FlowImbalanceTestData.LP.HP.p125 <- read.xlsx('./data-raw/FlowImbalanceTestData.xlsx')
# Read Data
TData <- FlowImbalanceTestData.LP.HP.p125
TData$ErosionRisk <- factor(TData$ErosionRisk)
#Shuffle Data
SData <- TData[sample(nrow(TData)),]
#Split Shuffled Data into training data, validation data & test data
TrgData <- SData[1:(0.6*nrow(SData)),]
ValData <- SData[(0.6*nrow(SData)):(0.8*nrow(SData)),]
TstData <- SData[(0.8*nrow(SData)):nrow(SData),]
#Build a Random Forest Model for Erosion Potential using Training Data
predictors <- TrgData %>% select(numRPX,PX1ProcFlow,PX2ProcFlow,PX3ProcFlow,
PX4ProcFlow,PX5ProcFlow,PX6ProcFlow,
PX7ProcFlow,PX8ProcFlow,PX9ProcFlow,
PX10ProcFlow,PX11ProcFlow,PX12ProcFlow,
PX1MotFlow,PX2MotFlow,PX3MotFlow,PX4MotFlow,
PX5MotFlow,PX6MotFlow,PX7MotFlow,PX8MotFlow,
PX9MotFlow,PX10MotFlow,PX11MotFlow,
PX12MotFlow) %>% as.matrix()
output <- TrgData$ErosionPotential
# Train random forest model
ErPot_RF <- train(x = predictors,y = output,ntree = 10,method = "rf",metric = "RMSE")
devtools::use_data(ErPot_RF)
library(Erosion)
fl
VorTeq_Linear(fl)
VorTea_Tree(fl)
VorTeq_Tree(fl)
VorTeq_RF(fl)
fl
VorTeq_Linear(fl)
library(Erosion)
VorTeq_Linear(fl)
fl
fl <- c(8., 180., 180., 180., 180., 180., 180., 180., 180., 0., 0., 0., 0., 205., 205., 205., 205., 205., 205., 205., 205., 205., 205., 205., 205.)
VorTeq_Linear(fl)
fl
library(Erosion)
VorTeq_Linear(fl)
input <- matrix(fl, nrow=1)
input
colnames(input) <- c('numRPX','PX1ProcFlow','PX2ProcFlow','PX3ProcFlow','PX4ProcFlow',
'PX5ProcFlow','PX6ProcFlow','PX7ProcFlow','PX8ProcFlow',
'PX9ProcFlow','PX10ProcFlow','PX11ProcFlow','PX12ProcFlow',
'PX1MotFlow','PX2MotFlow','PX3MotFlow','PX4MotFlow','PX5MotFlow',
'PX6MotFlow','PX7MotFlow','PX8MotFlow','PX9MotFlow','PX10MotFlow',
'PX11MotFlow','PX12MotFlow')
input
Erosion_Potential <- forecast::forecast(ErPot_Linear, input)
is.matrix(input)
is.numeric(matrix)
as.numeric(input)
Erosion_Potential <- forecast::forecast(ErPot_Linear, input)
as.double(input)
Erosion_Potential <- forecast::forecast(ErPot_Linear, input)
?forecast
fl
library(Erosion)
VorTeq_Linear(fl)
library(Erosion)
fl
VorTeq_Linear(fl)
VorTeq_Tree(fl)
VorTeq_RF(fl)
pwd
getwd()
devtools::use_testthat()
library(Erosion)
fl
VorTeq_Linear(fl)
a <- VorTeq_Linear(fl)
a
library(Erosion)
bb <- VorTeq_Linear(fl)
bb
bb[1]
bb[2]
devtools::test()
devtools::test()
devtools::test()
devtools::test()
VorTeq_Linear(fl)
library(Erosion)
VorTeq_Linear(fl)
a <- VorTeq_Linear(fl)
a
is.vector(a)
a[2]
a[1]
a[1]+0.2
library(Erosion)
VorTeq_Linear(fl)
library(Erosion)
VorTeq_Linear(fl)
a <- VorTeq_Linear(fl)
a
hr <- c(12,240,235,233,228,227,230,229,235,230,229,226,224,180,179,176,175,183,185,189,188,190,192,189,190)
hr
lr <- c(12,180,180,180,180,180,180,180,180,180,180,180,180,220,220,220,220,220,220,220,220,220,220,220,220)
lr
VorTeq_Linear(hr)
VorTeq_Linear(lr)
VorTeq_Linear(fl)
VorTeq_Tree(fl)
VorTeq_Tree(hr)
VorTeq_Tree(lr)
VorTeq_RF(hr)
VorTeq_RF(lr)
library(Erosion)
install.packages("Rtools")
devtools::test()
devtools::test()
library(Erosion)
devtools::test()
library(Erosion)
lr
hr
VorTeq_RF(hr)
VorTeq_RF(hr)
round(VorTeq_RF(hr)[1],2)
round(VorTeq_RF(hr)[1],2) == 0.4
round(VorTeq_RF(lr)[1],2) == 0.11
devtools::test()
library(Erosion)
devtools::test()
library(Erosion)
library(Erosion)
devtools::test()
class(VorTeq_RF(hr))
is.vector(VorTeq_RF(hr))
expect_equal(is.vector(VorTeq_RF(hr)), TRUE)
library(Erosion)
?Erosion
?VorTeq_Linear
?VorTeq_Tree
VorTeq_Tree(hr)
library(Erosion)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
round(VorTeq_RF(hr)[1],2)
round(VorTeq_RF(lr)[1],2)
?VorTeq_Linear
?VorTeq_Tree
?VorTeq_RF
